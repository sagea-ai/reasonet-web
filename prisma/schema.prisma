generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  clerkId                 String               @unique
  email                   String               @unique
  firstName               String?
  lastName                String?
  imageUrl                String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  hasCompletedOnboarding  Boolean              @default(false)
  onboardingStep          Int                  @default(1)
  referralCode            String               @unique @default(cuid())
  referredById            String?
  subscriptionTier        SubscriptionTier     @default(FREE)
  trialStartedAt          DateTime?
  trialEndsAt             DateTime?
  isTrialActive           Boolean              @default(false)
  createdAnalyses         Analysis[]
  activities              Activity[]
  chatSessions            ChatSession[]
  credits                 Credit[]
  organizationMemberships OrganizationMember[]
  createdOrganizations    Organization[]       @relation("OrganizationCreator")
  repositoryAccess        RepositoryAccess[]
  referredBy              User?                @relation("UserReferrals", fields: [referredById], references: [id])
  referrals               User[]               @relation("UserReferrals")
  emailEvents             UserEmailEvent[]

  @@map("users")
}

model Organization {
  id                  String                @id @default(cuid())
  name                String
  website             String?
  companySize         CompanySize?
  industry            String?
  slug                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  creatorId           String
  githubInstallations GitHubInstallation[]
  integrations        Integration[]
  members             OrganizationMember[]
  settings            OrganizationSettings?
  creator             User                  @relation("OrganizationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  repositories        Repository[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  role           OrganizationRole @default(MEMBER)
  userId         String
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_members")
}

model OrganizationSettings {
  id                   String       @id @default(cuid())
  organizationId       String       @unique
  emailNotifications   Boolean      @default(true)
  slackNotifications   Boolean      @default(false)
  discordNotifications Boolean      @default(false)
  autoAnalysis         Boolean      @default(true)
  analysisFrequency    String       @default("daily")
  analysisSettings     Json?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now())
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_settings")
}

model Repository {
  id                   String             @id @default(cuid())
  name                 String
  fullName             String             @unique
  githubId             String             @unique
  description          String?
  language             String?
  isPrivate            Boolean            @default(false)
  defaultBranch        String             @default("main")
  url                  String
  cloneUrl             String?
  sshUrl               String?
  starCount            Int?               @default(0)
  forkCount            Int?               @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  organizationId       String
  githubInstallationId String?
  indexed              Boolean            @default(false)
  lastIndexedAt        DateTime?
  analysisResults      Analysis[]
  chatSessions         ChatSession[]
  analyses             CodeAnalysis[]
  fileIndexingJobs     FileIndexingJob[]
  issues               Issue[]
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  access               RepositoryAccess[]
  stats                RepositoryStats?

  @@map("repositories")
}

model RepositoryAccess {
  id           String      @id @default(cuid())
  userId       String
  repositoryId String
  accessLevel  AccessLevel @default(READ)
  grantedAt    DateTime    @default(now())
  repository   Repository  @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, repositoryId])
  @@map("repository_access")
}

model Integration {
  id             String          @id @default(cuid())
  type           IntegrationType
  name           String
  settings       Json
  organizationId String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model CodeAnalysis {
  id           String         @id @default(cuid())
  branch       String         @default("main")
  commitSha    String
  status       AnalysisStatus @default(PENDING)
  startedAt    DateTime       @default(now())
  completedAt  DateTime?
  results      Json?
  repositoryId String
  repository   Repository     @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  issues       Issue[]

  @@map("code_analyses")
}

model Analysis {
  id                String           @id @default(cuid())
  name              String
  status            AnalysisStatus   @default(PENDING)
  type              AnalysisType     @default(CODEBASE)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now())
  completedAt       DateTime?
  repositoryId      String
  userId            String
  prNumber          Int?
  branch            String?
  commit            String?
  options           Json
  fileIndexingJobId String?
  fileIndexingJob   FileIndexingJob? @relation(fields: [fileIndexingJobId], references: [id])
  repository        Repository       @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  createdBy         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  results           AnalysisResult[]
}

model AnalysisResult {
  id          String        @id @default(cuid())
  analysisId  String
  type        IssueType
  severity    IssueSeverity
  title       String
  description String
  location    String?
  lineStart   Int?
  lineEnd     Int?
  code        String?
  suggestions String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  status      IssueStatus   @default(OPEN)
  analysis    Analysis      @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model FileIndexingJob {
  id           String     @id @default(cuid())
  repositoryId String
  status       JobStatus  @default(PENDING)
  progress     Float      @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  completedAt  DateTime?
  error        String?
  analyses     Analysis[]
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("file_indexing_jobs")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  title       String
  description String?
  metadata    Json?
  userId      String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Invitation {
  id               String           @id @default(cuid())
  email            String
  role             OrganizationRole @default(MEMBER)
  token            String           @unique
  organizationId   String
  organizationName String
  invitedById      String
  expiresAt        DateTime
  acceptedAt       DateTime?
  createdAt        DateTime         @default(now())

  @@map("invitations")
}

model GitHubInstallation {
  id             String        @id @default(cuid())
  installationId String        @unique
  accountId      String
  accountLogin   String
  accountType    String
  targetType     String
  permissions    Json
  events         Json
  suspendedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("github_installations")
}

model Credit {
  id          String     @id @default(cuid())
  amount      Float
  type        CreditType
  description String
  isActive    Boolean    @default(true)
  userId      String
  referralId  String?
  createdAt   DateTime   @default(now())
  expiresAt   DateTime?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model RepositoryStats {
  id           String     @id @default(cuid())
  repositoryId String     @unique
  totalFiles   Int        @default(0)
  totalLines   Int        @default(0)
  languages    Json?
  lastCommit   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("repository_stats")
}

model Issue {
  id             String        @id @default(cuid())
  title          String
  description    String
  status         IssueStatus   @default(OPEN)
  severity       IssueSeverity @default(MEDIUM)
  type           IssueType     @default(BUG)
  filePath       String?
  lineStart      Int?
  lineEnd        Int?
  repositoryId   String
  codeAnalysisId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  codeAnalysis   CodeAnalysis? @relation(fields: [codeAnalysisId], references: [id])
  repository     Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  @@map("issues")
}

model ChatSession {
  id           String        @id @default(cuid())
  title        String
  userId       String
  repositoryId String
  prNumber     Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  messages     ChatMessage[]
  repository   Repository    @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  role      String
  content   String
  timestamp DateTime    @default(now())
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model UserEmailEvent {
  id        String   @id @default(cuid())
  userId    String
  type      EmailEventType
  sentAt    DateTime @default(now())
  meta      Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@map("user_email_events")
}

enum CompanySize {
  JUST_ME
  TWO_TO_TEN
  ELEVEN_TO_FIFTY
  FIFTY_ONE_TO_TWO_HUNDRED
  TWO_HUNDRED_PLUS
  THOUSAND_PLUS
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum AccessLevel {
  READ
  WRITE
  ADMIN
}

enum IntegrationType {
  GITHUB
  GITLAB
  BITBUCKET
  SLACK
  DISCORD
  JIRA
  LINEAR
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  RUNNING
  COMPLETED
  FAILED
}

enum AnalysisType {
  CODEBASE
  PULL_REQUEST
  BRANCH
  COMMIT
}

enum IssueType {
  BUG
  SECURITY
  PERFORMANCE
  CODE_QUALITY
  SUGGESTION
  VULNERABILITY
  CODE_SMELL
  ACCESSIBILITY
  BEST_PRACTICE
}

enum IssueSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  IGNORED
  DISMISSED
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ActivityType {
  REPOSITORY_CONNECTED
  ANALYSIS_COMPLETED
  ISSUE_FOUND
  ISSUE_RESOLVED
  MEMBER_INVITED
  INTEGRATION_ADDED
  ORGANIZATION_CREATED
}

enum CreditType {
  REFERRAL_BONUS
  REFERRED_BONUS
  PROMOTIONAL
  MANUAL_ADJUSTMENT
}

enum SubscriptionTier {
  FREE
  PRO
  TRIAL
}

enum EmailEventType {
  WELCOME
  TRIAL_ENDING_SOON
  TRIAL_ENDED
  USAGE_LIMIT_APPROACHING
  USAGE_LIMIT_REACHED
}
