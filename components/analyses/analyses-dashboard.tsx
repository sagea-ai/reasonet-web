"use client"

import { useState, useEffect } from "react"
import { useUser } from "@clerk/nextjs"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import {
  Search,
  History,
  GitBranch,
  Clock,
  CheckCircle,
  AlertTriangle,
  Loader2,
  Settings,
  ChevronDown,
  Plus,
} from "lucide-react"
import Link from "next/link"
import { toast } from "sonner"
import { PullRequestDialog } from "./pull-request-dialog"
import { BiComment, BiSolidCommentAdd } from "react-icons/bi"

interface Organization {
  id: string
  name: string
  slug: string
}

interface Repository {
  id: string
  name: string
  fullName: string
  language: string | null
  githubInstallationId: string | null
}

interface PullRequest {
  number: number
  title: string
  state: string
  head: {
    ref: string
    sha: string
  }
  base: {
    ref: string
  }
  html_url: string
  user: {
    login: string
  }
}

interface Analysis {
  id: string
  name: string
  status: "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED"
  type: string
  prNumber: number | null
  branch: string | null
  commit: string | null
  createdAt: string
  updatedAt: string
  completedAt: string | null
  repository: Repository
  _count: {
    results: number
  }
  options?: {
    gistUrl?: string
  }
}

interface AnalysesDashboardProps {
  organizations: Organization[]
  currentOrganization: Organization
  initialAnalyses: Analysis[]
}

export function AnalysesDashboard({ organizations, currentOrganization, initialAnalyses }: AnalysesDashboardProps) {
  const { user } = useUser()
  const [searchQuery, setSearchQuery] = useState("")
  const [repositories, setRepositories] = useState<Repository[]>([])
  const [analyses, setAnalyses] = useState<Analysis[]>(initialAnalyses)
  const [isLoadingRepos, setIsLoadingRepos] = useState(false)
  const [isLoadingAnalyses, setIsLoadingAnalyses] = useState(false)
  const [isRunningAnalysis, setIsRunningAnalysis] = useState(false)
  const [activeTab, setActiveTab] = useState("repositories")
  const [showPRDialog, setShowPRDialog] = useState(false)
  const [selectedRepo, setSelectedRepo] = useState<Repository | null>(null)
  const [selectedProvider, setSelectedProvider] = useState<"github" | "gitlab">("github")

  // Settings state
  const [activeSettingsTab, setActiveSettingsTab] = useState("general")
  const [agentMode, setAgentMode] = useState(true)
  const [severityThreshold, setSeverityThreshold] = useState("med")
  const [commentTypes, setCommentTypes] = useState({
    syntax: true,
    logic: true,
    style: true,
  })
  const [commentHeader, setCommentHeader] = useState(
    "**Disclaimer:** This comment was generated by [Reasonet](https://Reasonet.com)\n---",
  )
  const [includeOverallSummary, setIncludeOverallSummary] = useState(true)
  const [appendPRSummary, setAppendPRSummary] = useState(false)
  const [createStatusCheck, setCreateStatusCheck] = useState(false)
  const [fileChangeLimit, setFileChangeLimit] = useState(100)
  const [autoTriggerOnCommits, setAutoTriggerOnCommits] = useState(false)

  // Load repositories when component mounts
  useEffect(() => {
    loadRepositories()
  }, [currentOrganization.id])

  // Load analyses when switching to history tab
  useEffect(() => {
    if (activeTab === "history") {
      refreshAnalyses()
    }
  }, [activeTab, currentOrganization.id])

  const loadRepositories = async () => {
    setIsLoadingRepos(true)
    try {
      const response = await fetch(`/api/github/repositories?organizationId=${currentOrganization.id}`)
      if (response.ok) {
        const repos = await response.json()
        const connectedRepos = repos.filter((repo: Repository) => repo.githubInstallationId)
        setRepositories(connectedRepos)

        if (connectedRepos.length === 0) {
          toast.error("No connected repositories found. Please connect your repositories to GitHub first.")
        }
      } else {
        toast.error("Failed to load repositories")
      }
    } catch (error) {
      console.error("Error loading repositories:", error)
      toast.error("Failed to load repositories")
    } finally {
      setIsLoadingRepos(false)
    }
  }

  const refreshAnalyses = async () => {
    setIsLoadingAnalyses(true)
    try {
      const response = await fetch("/api/analyses")
      if (response.ok) {
        const freshAnalyses = await response.json()
        setAnalyses(freshAnalyses)
      }
    } catch (error) {
      console.error("Error refreshing analyses:", error)
      toast.error("Failed to load analyses")
    } finally {
      setIsLoadingAnalyses(false)
    }
  }

  const handleSelectRepository = (repo: Repository) => {
    setSelectedRepo(repo)
    setShowPRDialog(true)
  }

  const handleSelectPR = async (pr: PullRequest) => {
    if (!selectedRepo) return

    setIsRunningAnalysis(true)
    try {
      const response = await fetch("/api/analyses", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          repositoryId: selectedRepo.id,
          prNumber: pr.number,
          branch: pr.head.ref,
          commit: pr.head.sha,
        }),
      })

      if (response.ok) {
        toast.success("Analysis started successfully")
        // Refresh analyses if needed
      } else {
        const error = await response.json()
        toast.error(error.message || "Failed to start analysis")
      }
    } catch (error) {
      console.error("Error running analysis:", error)
      toast.error("Failed to start analysis")
    } finally {
      setIsRunningAnalysis(false)
    }
  }

  const getStatusBadge = (status: Analysis["status"]) => {
    const variants = {
      PENDING: {
        className: "bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-300",
        icon: Clock,
        text: "Pending",
      },
      PROCESSING: {
        className: "bg-blue-100 text-blue-800 border-blue-200 dark:bg-blue-900/20 dark:text-blue-300",
        icon: Loader2,
        text: "Running",
      },
      COMPLETED: {
        className: "bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-300",
        icon: CheckCircle,
        text: "Completed",
      },
      FAILED: {
        className: "bg-red-100 text-red-800 border-red-200 dark:bg-red-900/20 dark:text-red-300",
        icon: AlertTriangle,
        text: "Failed",
      },
    }

    const config = variants[status]
    const Icon = config.icon

    return (
      <span
        className={`inline-flex items-center gap-1 px-2 py-0.5 rounded-md text-xs font-medium border ${config.className}`}
      >
        <Icon size={10} className={status === "PROCESSING" ? "animate-spin" : ""} />
        {config.text}
      </span>
    )
  }

  const filteredRepositories = repositories.filter((repo) =>
    repo.fullName.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  const filteredAnalyses = analyses.filter(
    (analysis) =>
      analysis.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      analysis.repository.fullName.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  const GitHubIcon = () => (
    <svg className="h-4 w-4" viewBox="0 0 24 24" fill="#181717">
      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
    </svg>
  )

  const GitLabIcon = () => (
    <svg className="h-4 w-4" viewBox="0 0 24 24">
      <path
        fill="#E24329"
        d="M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51 1.22 3.78a.84.84 0 0 1-.3.94z"
      />
      <path fill="#FC6D26" d="M22.65 14.39L12 22.13V2l7.2 12.39z" />
      <path fill="#FCA326" d="M12 2l7.2 12.39-7.2-5.66V2z" />
      <path fill="#FC6D26" d="M1.35 14.39L12 22.13V2L4.8 14.39z" />
      <path fill="#FCA326" d="M12 2L4.8 14.39l7.2-5.66V2z" />
    </svg>
  )

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl font-bold text-gray-900">Reasonet Code Review</h1>
            <div className="flex items-center gap-4">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="flex items-center gap-2 h-8">
                    {selectedProvider === "github" ? <GitHubIcon /> : <GitLabIcon />}
                    <span className="text-sm text-gray-600 capitalize">{selectedProvider}</span>
                    <ChevronDown className="h-3 w-3 text-gray-400" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-36">
                  <DropdownMenuItem onClick={() => setSelectedProvider("github")} className="flex items-center gap-2">
                    <GitHubIcon />
                    <span>GitHub</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => setSelectedProvider("gitlab")} className="flex items-center gap-2">
                    <GitLabIcon />
                    <span>GitLab</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-6xl mx-auto px-4">
          <nav className="flex">
            <button
              onClick={() => setActiveTab("repositories")}
              className={`px-3 py-2 text-sm font-medium border-b-2 ${
                activeTab === "repositories"
                  ? "border-sky-500 text-sky-600 bg-sky-50"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
            >
              <div className="flex items-center gap-2">
                <GitBranch className="h-3.5 w-3.5" />
                Repositories
              </div>
            </button>
            <button
              onClick={() => setActiveTab("history")}
              className={`px-3 py-2 text-sm font-medium border-b-2 ${
                activeTab === "history"
                  ? "border-sky-500 text-sky-600 bg-sky-50"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
            >
              <div className="flex items-center gap-2">
                <History className="h-3.5 w-3.5" />
                History
              </div>
            </button>
            <button
              onClick={() => setActiveTab("settings")}
              className={`px-3 py-2 text-sm font-medium border-b-2 ${
                activeTab === "settings"
                  ? "border-sky-500 text-sky-600 bg-sky-50"
                  : "border-transparent text-gray-500 hover:text-gray-700"
              }`}
            >
              <div className="flex items-center gap-2">
                <Settings className="h-3.5 w-3.5" />
                Settings
              </div>
            </button>
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-6xl mx-auto px-4 py-3">
        {activeTab === "repositories" && (
          <div className="space-y-3">
            {/* Repositories Section */}
            <div className="bg-white rounded-lg border border-gray-200 h-[calc(100vh-200px)] flex flex-col">
              {/* Header */}
              <div className="px-4 py-2 border-b border-gray-200 flex-shrink-0">
                <div className="flex items-center justify-between">
                  <h2 className="text-base font-semibold text-gray-900">Repositories</h2>
                  <div className="flex items-center gap-4 text-xs">
                    <span
                      className={`${repositories.filter((r) => r.githubInstallationId).length > 0 ? "text-sky-600 font-medium" : "text-gray-500"}`}
                    >
                      Enabled ({repositories.filter((r) => r.githubInstallationId).length})
                    </span>
                    <span className="text-gray-500">Disabled (0)</span>
                    <span className="text-gray-500">All ({repositories.length})</span>
                  </div>
                </div>
              </div>

              {/* Search */}
              <div className="px-4 py-2 border-b border-gray-200 flex-shrink-0">
                <div className="relative max-w-7xl">
                  <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3.5 w-3.5 text-gray-400" />
                  <Input
                    placeholder="Search repository"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-8 bg-sky-50 border-sky-200 focus:bg-white h-8 text-sm"
                  />
                </div>
              </div>

              {/* Repository List */}
              {isLoadingRepos ? (
                <div className="flex items-center justify-center py-8 flex-1">
                  <Loader2 className="h-5 w-5 animate-spin text-gray-400" />
                </div>
              ) : (
                <div className="flex-1 overflow-hidden flex flex-col">
                  {/* Table Header */}
                  <div className="px-4 py-1.5 bg-gray-50 border-b border-gray-200 flex-shrink-0">
                    <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">NAME</div>
                  </div>

                  {/* Scrollable Repository Items */}
                  <div className="flex-1 overflow-y-auto">
                    {filteredRepositories.map((repo, index) => (
                      <div
                        key={repo.id}
                        className={`group px-4 py-2 hover:bg-gray-50 transition-colors ${
                          index !== filteredRepositories.length - 1 ? "border-b border-gray-100" : ""
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2 min-w-0">
                            <GitBranch className="h-3 w-3 text-gray-400 flex-shrink-0" />
                            <span className="text-sm font-medium text-gray-900 truncate">{repo.fullName}</span>
                          </div>
                          <Button
                            onClick={() => handleSelectRepository(repo)}
                            disabled={isRunningAnalysis}
                            size="sm"
                            className="opacity-0 group-hover:opacity-100 transition-opacity bg-sky-600 hover:bg-sky-700 h-6 text-xs flex-shrink-0 ml-2 px-2"
                          >
                            {isRunningAnalysis ? <Loader2 className="h-3 w-3 animate-spin" /> : "Run Analysis"}
                          </Button>
                        </div>
                      </div>
                    ))}

                    {filteredRepositories.length === 0 && !isLoadingRepos && (
                      <div className="px-4 py-8 text-center">
                        <GitBranch className="h-10 w-10 text-gray-300 mx-auto mb-3" />
                        <h3 className="text-base font-medium text-gray-900 mb-1">No repositories found</h3>
                        <p className="text-sm text-gray-500">
                          {searchQuery
                            ? "Try adjusting your search terms."
                            : "Connect your repositories to GitHub to get started."}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === "history" && (
          <div className="space-y-3">
            {/* History Section */}
            <div className="bg-white rounded-lg border border-gray-200 h-[calc(100vh-200px)] flex flex-col">
              {/* Header */}
              <div className="px-4 py-2 border-b border-gray-200 flex-shrink-0">
                <div className="flex items-center justify-between">
                  <h2 className="text-base font-semibold text-gray-900">Past Runs</h2>
                  <div className="flex items-center gap-4 text-xs">
                    <span className={`${analyses.length > 0 ? "text-sky-600 font-medium" : "text-gray-500"}`}>
                      Enabled ({analyses.length})
                    </span>
                    <span className="text-gray-500">Disabled (0)</span>
                    <span className="text-gray-500">All ({analyses.length})</span>
                  </div>
                </div>
              </div>

              {/* Search */}
              <div className="px-4 py-2 border-b border-gray-200 flex-shrink-0">
                <div className="relative max-w-sm">
                  <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3.5 w-3.5 text-gray-400" />
                  <Input
                    placeholder="Search repository"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-8 bg-gray-50 border-gray-200 focus:bg-white h-7 text-sm"
                  />
                </div>
              </div>

              {/* Analysis List */}
              {isLoadingAnalyses ? (
                <div className="flex items-center justify-center py-8 flex-1">
                  <Loader2 className="h-5 w-5 animate-spin text-gray-400" />
                </div>
              ) : (
                <div className="flex-1 overflow-hidden flex flex-col">
                  {/* Table Header */}
                  <div className="px-4 py-1.5 bg-gray-50 border-b border-gray-200 flex-shrink-0">
                    <div className="text-xs font-semibold text-gray-600 uppercase tracking-wider">NAME</div>
                  </div>

                  {/* Scrollable Analysis Items */}
                  <div className="flex-1 overflow-y-auto">
                    {filteredAnalyses.map((analysis, index) => (
                      <Link key={analysis.id} href={`/analyses/${analysis.id}`}>
                        <div
                          className={`group px-4 py-2 hover:bg-gray-50 transition-colors cursor-pointer ${
                            index !== filteredAnalyses.length - 1 ? "border-b border-gray-100" : ""
                          }`}
                        >
                          <div className="flex items-center justify-between min-w-0">
                            <div className="flex items-center gap-2 min-w-0 flex-1">
                              <GitBranch className="h-3 w-3 text-gray-400 flex-shrink-0" />
                              <div className="flex flex-col min-w-0 flex-1">
                                <span className="text-sm font-medium text-gray-900 group-hover:text-sky-600 truncate">
                                  {analysis.repository.fullName}
                                </span>
                                <div className="flex items-center gap-2 mt-0.5">
                                  {analysis.prNumber && (
                                    <span className="text-xs text-sky-600 font-medium">PR #{analysis.prNumber}</span>
                                  )}
                                  {getStatusBadge(analysis.status)}
                                  <Badge variant="secondary" className="text-xs h-4 px-1.5">
                                    {analysis._count.results} issues
                                  </Badge>
                                  <span className="text-xs text-gray-500">
                                    {new Date(analysis.createdAt).toLocaleDateString("en-US", {
                                      month: "short",
                                      day: "numeric",
                                    })}
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </Link>
                    ))}

                    {filteredAnalyses.length === 0 && !isLoadingAnalyses && (
                      <div className="px-4 py-8 text-center">
                        <History className="h-10 w-10 text-gray-300 mx-auto mb-3" />
                        <h3 className="text-base font-medium text-gray-900 mb-1">
                          {searchQuery ? "No analyses found" : "No analyses yet"}
                        </h3>
                        <p className="text-sm text-gray-500">
                          {searchQuery
                            ? "Try adjusting your search terms."
                            : "Run your first analysis from the Repositories tab."}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === "settings" && (
          <div className="space-y-4">
            {/* Settings Section */}
            <div className="bg-white rounded-lg border border-gray-200">
              <div className="px-4 py-3 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h2 className="text-base font-semibold text-gray-900">Settings</h2>
                  <div className="flex items-center gap-2">
                    <div className="flex items-center gap-1 text-xs text-green-600 bg-green-50 px-2 py-1 rounded font-medium">
                      <div className="w-1 h-1 rounded-full bg-green-500"></div>
                      Saved
                    </div>
                  </div>
                </div>
              </div>

              {/* Settings Sub-tabs */}
              <div className="border-b border-gray-200">
                <nav className="flex px-4">
                  <button
                    onClick={() => setActiveSettingsTab("general")}
                    className={`px-3 py-2 text-sm font-medium border-b-2 ${
                      activeSettingsTab === "general"
                        ? "border-sky-500 text-sky-600 bg-sky-50"
                        : "border-transparent text-gray-500 hover:text-gray-700"
                    }`}
                  >
                    General
                  </button>
                  <button
                    onClick={() => setActiveSettingsTab("review-triggers")}
                    className={`px-3 py-2 text-sm font-medium border-b-2 ${
                      activeSettingsTab === "review-triggers"
                        ? "border-sky-500 text-sky-600 bg-sky-50"
                        : "border-transparent text-gray-500 hover:text-gray-700"
                    }`}
                  >
                    Review Triggers
                  </button>
                </nav>
              </div>

              {/* General Tab Content */}
              {activeSettingsTab === "general" && (
                <div className="p-6 space-y-6">
                  {/* Agent Mode Card */}
                  <div className="border border-gray-200 bg-sky-300/40 rounded-lg p-4 space-y-10">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-sky-500"></div>
                      <h3 className="text-sm font-medium text-gray-900">Agent Mode</h3>
                    </div>

                    <div className="flex items-center justify-between py-1">
                      <span className="text-sm text-gray-700">Enable agent mode</span>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={agentMode}
                          onChange={(e) => setAgentMode(e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-400 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-sky-500"></div>
                      </label>
                    </div>
                  </div>

                  {/* Comments Card */}
                  <div className="border border-gray-200 rounded-lg p-4 space-y-4">
                    <div className="flex items-center gap-2">
                      <BiSolidCommentAdd className="h-4 w-4" />
                      <h3 className="text-sm font-medium text-gray-900">Comments</h3>
                    </div>

                    {/* Severity Threshold */}
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <label className="text-sm text-gray-700">Severity Threshold</label>
                        <div
                          className="w-4 h-4 rounded-full bg-gray-400 flex items-center justify-center cursor-help"
                          title="Severity Threshold"
                        >
                          <span className="text-xs text-white font-bold">i</span>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="flex-1 relative">
                          <input
                            type="range"
                            min="0"
                            max="2"
                            value={severityThreshold === "low" ? 0 : severityThreshold === "med" ? 1 : 2}
                            onChange={(e) => {
                              const val = Number.parseInt(e.target.value)
                              setSeverityThreshold(val === 0 ? "low" : val === 1 ? "med" : "high")
                            }}
                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                            style={{
                              background: `linear-gradient(to right, #8b5cf6 0%, #8b5cf6 ${severityThreshold === "low" ? 0 : severityThreshold === "med" ? 50 : 100}%, #e5e7eb ${severityThreshold === "low" ? 0 : severityThreshold === "med" ? 50 : 100}%, #e5e7eb 100%)`,
                            }}
                          />
                          <style jsx>{`
                            .slider::-webkit-slider-thumb {
                              appearance: none;
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #8b5cf6;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                            }
                            .slider::-moz-range-thumb {
                              height: 20px;
                              width: 20px;
                              border-radius: 50%;
                              background: #8b5cf6;
                              cursor: pointer;
                              border: 2px solid white;
                              box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                            }
                          `}</style>
                        </div>
                        <div className="flex gap-2">
                          <span
                            className={`text-xs px-2 py-1 rounded font-medium ${severityThreshold === "low" ? "bg-sky-100 text-sky-800" : "text-gray-500"}`}
                          >
                            LOW
                          </span>
                          <span
                            className={`text-xs px-2 py-1 rounded font-medium ${severityThreshold === "med" ? "bg-sky-100 text-sky-800" : "text-gray-500"}`}
                          >
                            MED
                          </span>
                          <span
                            className={`text-xs px-2 py-1 rounded font-medium ${severityThreshold === "high" ? "bg-sky-100 text-sky-800" : "text-gray-500"}`}
                          >
                            HIGH
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* Comment Types */}
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <label className="text-sm text-gray-700">Comment Types</label>
                        <div
                          className="w-4 h-4 rounded-full bg-gray-400 flex items-center justify-center cursor-help"
                          title="Comment Types"
                        >
                          <span className="text-xs text-white font-bold">i</span>
                        </div>
                      </div>
                      <div className="flex gap-6">
                        {Object.entries(commentTypes).map(([type, enabled]) => (
                          <label key={type} className="flex items-center gap-2 cursor-pointer">
                            <input
                              type="checkbox"
                              checked={enabled}
                              onChange={(e) => setCommentTypes((prev) => ({ ...prev, [type]: e.target.checked }))}
                              className="w-4 h-4 text-sky-600 bg-gray-100 border-gray-300 rounded focus:ring-sky-500 focus:ring-2"
                            />
                            <span className="text-sm text-gray-700 capitalize">{type}</span>
                          </label>
                        ))}
                      </div>
                    </div>

                    {/* Comment Header */}
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <label className="text-sm text-gray-700">Comment Header</label>
                        <div
                          className="w-4 h-4 rounded-full bg-gray-400 flex items-center justify-center cursor-help"
                          title="Comment Header"
                        >
                          <span className="text-xs text-white font-bold">i</span>
                        </div>
                      </div>
                      <textarea
                        value={commentHeader}
                        onChange={(e) => setCommentHeader(e.target.value)}
                        className="w-full p-3 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-sky-500 focus:border-transparent resize-none bg-gray-50"
                        rows={2}
                        placeholder="Enter comment header..."
                      />
                    </div>
                  </div>

                  {/* PR Summary Card */}
                  <div className="border border-gray-200 rounded-lg p-4 space-y-4">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full bg-gray-400"></div>
                      <h3 className="text-sm font-medium text-gray-900">PR Summary</h3>
                    </div>

                    <div className="space-y-4">
                      <div className="flex items-center justify-between py-1">
                        <div className="flex items-center gap-2">
                          <span className="text-sm text-gray-700">Include overall summary</span>
                          <div
                            className="w-4 h-4 rounded-full bg-gray-400 flex items-center justify-center cursor-help"
                            title="Include overall summary information"
                          >
                            <span className="text-xs text-white font-bold">i</span>
                          </div>
                        </div>
                        <label className="relative inline-flex items-center cursor-pointer">
                          <input
                            type="checkbox"
                            checked={includeOverallSummary}
                            onChange={(e) => setIncludeOverallSummary(e.target.checked)}
                            className="sr-only peer"
                          />
                          <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-sky-500"></div>
                        </label>
                      </div>

                      <div className="flex items-center justify-between py-1">
                        <span className="text-sm text-gray-700">Append PR summary</span>
                        <label className="relative inline-flex items-center cursor-pointer">
                          <input
                            type="checkbox"
                            checked={appendPRSummary}
                            onChange={(e) => setAppendPRSummary(e.target.checked)}
                            className="sr-only peer"
                          />
                          <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-sky-500"></div>
                        </label>
                      </div>

                      <div className="text-right pt-2">
                        <span className="text-xs text-gray-500 italic">Summary posted as comment</span>
                      </div>
                    </div>
                  </div>

                  {/* Custom Instructions Card */}
                  <div className="border border-gray-200 rounded-lg p-4 space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-2 h-2 rounded-full bg-gray-400"></div>
                        <h3 className="text-sm font-medium text-gray-900">Custom Instructions</h3>
                        <span className="text-xs bg-red-50 text-red-700 px-2 py-1 rounded font-medium border border-red-200">
                          Deprecated
                        </span>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        className="text-xs font-medium px-3 py-1.5 h-7 border-gray-300 text-gray-700 hover:bg-gray-50"
                      >
                        GO TO CUSTOM CONTEXT PAGE
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {/* Review Triggers Tab Content */}
              {activeSettingsTab === "review-triggers" && (
                <div className="p-6 space-y-6">
                  {/* Filters Card */}
                  <div className="border border-gray-200 rounded-lg p-4 space-y-4">
                    <div className="flex items-center justify-between">
                      <h3 className="text-sm font-medium text-gray-900">Filters:</h3>
                      <Button
                        variant="outline"
                        size="sm"
                        className="text-xs font-medium px-3 py-1.5 h-7 border-gray-300 text-gray-700 hover:bg-gray-50 flex items-center gap-1"
                      >
                        <Plus className="h-3 w-3" />
                        ADD FILTER
                      </Button>
                    </div>
                  </div>

                  {/* Review Options Card */}
                  <div className="border border-gray-200 rounded-lg p-4 space-y-6">
                    {/* Status Check */}
                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-700">Create a status check for each PR</span>
                        <div
                          className="w-4 h-4 rounded-full bg-gray-400 flex items-center justify-center cursor-help"
                          title="Create a status check for each PR"
                        >
                          <span className="text-xs text-white font-bold">i</span>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={createStatusCheck}
                          onChange={(e) => setCreateStatusCheck(e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-sky-500"></div>
                      </label>
                    </div>

                    {/* File Change Limit */}
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium text-gray-700">File Change Limit</span>
                        <div
                          className="w-4 h-4 rounded-full bg-gray-400 flex items-center justify-center cursor-help"
                          title="Maximum number of file changes"
                        >
                          <span className="text-xs text-white font-bold">i</span>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <Input
                          type="number"
                          value={fileChangeLimit}
                          onChange={(e) => setFileChangeLimit(Number.parseInt(e.target.value) || 0)}
                          className="w-20 h-8 text-sm"
                          min="1"
                        />
                      </div>
                    </div>

                    {/* Auto Trigger */}
                    <div className="flex items-center justify-between py-3">
                      <div className="flex items-center gap-2">
                        <span className="text-sm text-gray-700">Automatically trigger on new commits</span>
                        <div
                          className="w-4 h-4 rounded-full bg-orange-400 flex items-center justify-center cursor-help"
                          title="Automatically trigger analysis on new commits"
                        >
                          <span className="text-xs text-white font-bold">!</span>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={autoTriggerOnCommits}
                          onChange={(e) => setAutoTriggerOnCommits(e.target.checked)}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-sky-500"></div>
                      </label>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        <PullRequestDialog
          open={showPRDialog}
          onOpenChange={setShowPRDialog}
          repository={selectedRepo}
          onSelectPR={handleSelectPR}
        />
      </div>
    </div>
  )
}
